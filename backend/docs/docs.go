// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/proposals": {
            "get": {
                "description": "get proposals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proposal"
                ],
                "summary": "List proposals",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposal"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create proposals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proposal"
                ],
                "summary": "Create a new proposal",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProposalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Proposal"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session ID not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/proposals/{id}": {
            "get": {
                "description": "get a specific proposal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proposal"
                ],
                "summary": "Get a proposal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proposal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Proposal"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Proposal not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "description": "get sessions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "List sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Session"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "create session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Create a new session",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sessions/{id}": {
            "get": {
                "description": "get a specific session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Get a session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/votes": {
            "post": {
                "description": "create vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vote"
                ],
                "summary": "Create a new vote",
                "parameters": [
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateVoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Vote"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Proposal session closed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Proposal not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/votes/{id}": {
            "delete": {
                "description": "delete vote",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Vote"
                ],
                "summary": "Delete a vote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Proposal session closed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Proposal not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database operation failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CreateProposalRequest": {
            "type": "object",
            "required": [
                "movieId",
                "sessionId"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "movieId": {
                    "type": "integer"
                },
                "sessionId": {
                    "type": "integer"
                }
            }
        },
        "CreateSessionRequest": {
            "type": "object",
            "required": [
                "endAt",
                "startAt"
            ],
            "properties": {
                "endAt": {
                    "type": "string"
                },
                "startAt": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "CreateVoteRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "Proposal": {
            "type": "object",
            "required": [
                "id",
                "movieId",
                "sessionId"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "movieId": {
                    "type": "integer"
                },
                "session": {
                    "$ref": "#/definitions/Session"
                },
                "sessionId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Vote"
                    }
                }
            }
        },
        "Session": {
            "type": "object",
            "required": [
                "endAt",
                "id",
                "startAt"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "endAt": {
                    "type": "string",
                    "example": "2011-10-05T14:48:00.000Z"
                },
                "id": {
                    "type": "integer"
                },
                "proposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Proposal"
                    }
                },
                "startAt": {
                    "type": "string",
                    "example": "2011-10-05T14:48:00.000Z"
                },
                "title": {
                    "type": "string",
                    "example": "a beautiful title"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "Vote": {
            "type": "object",
            "required": [
                "id",
                "proposalId"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "proposalId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Proposal"
        },
        {
            "name": "Session"
        },
        {
            "name": "Vote"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:1337",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "PickAMovie Swagger API",
	Description: "May the force be with us",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
