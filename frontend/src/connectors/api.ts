/* tslint:disable */
/* eslint-disable */
/**
 * PickAMovie Swagger API
 * May the force be with us
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateProposalRequest
 */
export interface CreateProposalRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProposalRequest
     */
    comment?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProposalRequest
     */
    movieId: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProposalRequest
     */
    sessionId: number;
}
/**
 * 
 * @export
 * @interface CreateSessionRequest
 */
export interface CreateSessionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    endAt: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSessionRequest
     */
    startAt: string;
}
/**
 * 
 * @export
 * @interface CreateVoteRequest
 */
export interface CreateVoteRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateVoteRequest
     */
    id: number;
}
/**
 * 
 * @export
 * @interface Proposal
 */
export interface Proposal {
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    movieId: number;
    /**
     * 
     * @type {Session}
     * @memberof Proposal
     */
    session?: Session;
    /**
     * 
     * @type {number}
     * @memberof Proposal
     */
    sessionId: number;
    /**
     * 
     * @type {string}
     * @memberof Proposal
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<Vote>}
     * @memberof Proposal
     */
    votes?: Array<Vote>;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    endAt: string;
    /**
     * 
     * @type {number}
     * @memberof Session
     */
    id: number;
    /**
     * 
     * @type {Array<Proposal>}
     * @memberof Session
     */
    proposals?: Array<Proposal>;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    startAt: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface Vote
 */
export interface Vote {
    /**
     * 
     * @type {string}
     * @memberof Vote
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof Vote
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Vote
     */
    proposalId: number;
    /**
     * 
     * @type {string}
     * @memberof Vote
     */
    updatedAt?: string;
}

/**
 * ProposalApi - axios parameter creator
 * @export
 */
export const ProposalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get proposals
         * @summary List proposals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a specific proposal
         * @summary Get a proposal
         * @param {string} id Proposal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('proposalsIdGet', 'id', id)
            const localVarPath = `/proposals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create proposals
         * @summary Create a new proposal
         * @param {CreateProposalRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsPost: async (request: CreateProposalRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('proposalsPost', 'request', request)
            const localVarPath = `/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProposalApi - functional programming interface
 * @export
 */
export const ProposalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProposalApiAxiosParamCreator(configuration)
    return {
        /**
         * get proposals
         * @summary List proposals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposalsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Proposal>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposalsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a specific proposal
         * @summary Get a proposal
         * @param {string} id Proposal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposalsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Proposal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposalsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create proposals
         * @summary Create a new proposal
         * @param {CreateProposalRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposalsPost(request: CreateProposalRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Proposal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposalsPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProposalApi - factory interface
 * @export
 */
export const ProposalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProposalApiFp(configuration)
    return {
        /**
         * get proposals
         * @summary List proposals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsGet(options?: any): AxiosPromise<Array<Proposal>> {
            return localVarFp.proposalsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a specific proposal
         * @summary Get a proposal
         * @param {string} id Proposal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsIdGet(id: string, options?: any): AxiosPromise<Proposal> {
            return localVarFp.proposalsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * create proposals
         * @summary Create a new proposal
         * @param {CreateProposalRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposalsPost(request: CreateProposalRequest, options?: any): AxiosPromise<Proposal> {
            return localVarFp.proposalsPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProposalApi - object-oriented interface
 * @export
 * @class ProposalApi
 * @extends {BaseAPI}
 */
export class ProposalApi extends BaseAPI {
    /**
     * get proposals
     * @summary List proposals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalApi
     */
    public proposalsGet(options?: any) {
        return ProposalApiFp(this.configuration).proposalsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a specific proposal
     * @summary Get a proposal
     * @param {string} id Proposal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalApi
     */
    public proposalsIdGet(id: string, options?: any) {
        return ProposalApiFp(this.configuration).proposalsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create proposals
     * @summary Create a new proposal
     * @param {CreateProposalRequest} request Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProposalApi
     */
    public proposalsPost(request: CreateProposalRequest, options?: any) {
        return ProposalApiFp(this.configuration).proposalsPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get sessions
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a specific session
         * @summary Get a session
         * @param {string} id Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sessionsIdGet', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create session
         * @summary Create a new session
         * @param {CreateSessionRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsPost: async (request: CreateSessionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('sessionsPost', 'request', request)
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * get sessions
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a specific session
         * @summary Get a session
         * @param {string} id Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create session
         * @summary Create a new session
         * @param {CreateSessionRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsPost(request: CreateSessionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * get sessions
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsGet(options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.sessionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a specific session
         * @summary Get a session
         * @param {string} id Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsIdGet(id: string, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * create session
         * @summary Create a new session
         * @param {CreateSessionRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsPost(request: CreateSessionRequest, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * get sessions
     * @summary List sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sessionsGet(options?: any) {
        return SessionApiFp(this.configuration).sessionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a specific session
     * @summary Get a session
     * @param {string} id Session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sessionsIdGet(id: string, options?: any) {
        return SessionApiFp(this.configuration).sessionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create session
     * @summary Create a new session
     * @param {CreateSessionRequest} request Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sessionsPost(request: CreateSessionRequest, options?: any) {
        return SessionApiFp(this.configuration).sessionsPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VoteApi - axios parameter creator
 * @export
 */
export const VoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete vote
         * @summary Delete a vote
         * @param {string} id Vote ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('votesIdDelete', 'id', id)
            const localVarPath = `/votes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create vote
         * @summary Create a new vote
         * @param {CreateVoteRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesPost: async (request: CreateVoteRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('votesPost', 'request', request)
            const localVarPath = `/votes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoteApi - functional programming interface
 * @export
 */
export const VoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoteApiAxiosParamCreator(configuration)
    return {
        /**
         * delete vote
         * @summary Delete a vote
         * @param {string} id Vote ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votesIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create vote
         * @summary Create a new vote
         * @param {CreateVoteRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votesPost(request: CreateVoteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votesPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoteApi - factory interface
 * @export
 */
export const VoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoteApiFp(configuration)
    return {
        /**
         * delete vote
         * @summary Delete a vote
         * @param {string} id Vote ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.votesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * create vote
         * @summary Create a new vote
         * @param {CreateVoteRequest} request Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votesPost(request: CreateVoteRequest, options?: any): AxiosPromise<Vote> {
            return localVarFp.votesPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VoteApi - object-oriented interface
 * @export
 * @class VoteApi
 * @extends {BaseAPI}
 */
export class VoteApi extends BaseAPI {
    /**
     * delete vote
     * @summary Delete a vote
     * @param {string} id Vote ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public votesIdDelete(id: string, options?: any) {
        return VoteApiFp(this.configuration).votesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create vote
     * @summary Create a new vote
     * @param {CreateVoteRequest} request Request Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public votesPost(request: CreateVoteRequest, options?: any) {
        return VoteApiFp(this.configuration).votesPost(request, options).then((request) => request(this.axios, this.basePath));
    }
}


