/* tslint:disable */
/* eslint-disable */
/**
 * PickAMovie Swagger API
 * May the force be with us
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelsCreateProposalRequest,
    ModelsCreateProposalRequestFromJSON,
    ModelsCreateProposalRequestToJSON,
    ModelsCreateSessionRequest,
    ModelsCreateSessionRequestFromJSON,
    ModelsCreateSessionRequestToJSON,
    ModelsCreateVoteRequest,
    ModelsCreateVoteRequestFromJSON,
    ModelsCreateVoteRequestToJSON,
    ModelsProposal,
    ModelsProposalFromJSON,
    ModelsProposalToJSON,
    ModelsSession,
    ModelsSessionFromJSON,
    ModelsSessionToJSON,
    ModelsVote,
    ModelsVoteFromJSON,
    ModelsVoteToJSON,
} from '../models';

export interface ProposalsIdGetRequest {
    id: string;
}

export interface ProposalsPostRequest {
    request: ModelsCreateProposalRequest;
}

export interface SessionsIdGetRequest {
    id: string;
}

export interface SessionsPostRequest {
    request: ModelsCreateSessionRequest;
}

export interface VotesPostRequest {
    request: ModelsCreateVoteRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * get proposals
     * List proposals
     */
    async proposalsGetRaw(): Promise<runtime.ApiResponse<Array<ModelsProposal>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proposals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsProposalFromJSON));
    }

    /**
     * get proposals
     * List proposals
     */
    async proposalsGet(): Promise<Array<ModelsProposal>> {
        const response = await this.proposalsGetRaw();
        return await response.value();
    }

    /**
     * get a specific proposal
     * Get a proposal
     */
    async proposalsIdGetRaw(requestParameters: ProposalsIdGetRequest): Promise<runtime.ApiResponse<ModelsProposal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling proposalsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proposals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsProposalFromJSON(jsonValue));
    }

    /**
     * get a specific proposal
     * Get a proposal
     */
    async proposalsIdGet(requestParameters: ProposalsIdGetRequest): Promise<ModelsProposal> {
        const response = await this.proposalsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create proposals
     * Create a new proposal
     */
    async proposalsPostRaw(requestParameters: ProposalsPostRequest): Promise<runtime.ApiResponse<ModelsProposal>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling proposalsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/proposals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateProposalRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsProposalFromJSON(jsonValue));
    }

    /**
     * create proposals
     * Create a new proposal
     */
    async proposalsPost(requestParameters: ProposalsPostRequest): Promise<ModelsProposal> {
        const response = await this.proposalsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * get sessions
     * List sessions
     */
    async sessionsGetRaw(): Promise<runtime.ApiResponse<Array<ModelsSession>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsSessionFromJSON));
    }

    /**
     * get sessions
     * List sessions
     */
    async sessionsGet(): Promise<Array<ModelsSession>> {
        const response = await this.sessionsGetRaw();
        return await response.value();
    }

    /**
     * get a specific session
     * Get a session
     */
    async sessionsIdGetRaw(requestParameters: SessionsIdGetRequest): Promise<runtime.ApiResponse<ModelsSession>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sessionsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsSessionFromJSON(jsonValue));
    }

    /**
     * get a specific session
     * Get a session
     */
    async sessionsIdGet(requestParameters: SessionsIdGetRequest): Promise<ModelsSession> {
        const response = await this.sessionsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create session
     * Create a new session
     */
    async sessionsPostRaw(requestParameters: SessionsPostRequest): Promise<runtime.ApiResponse<ModelsSession>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling sessionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateSessionRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsSessionFromJSON(jsonValue));
    }

    /**
     * create session
     * Create a new session
     */
    async sessionsPost(requestParameters: SessionsPostRequest): Promise<ModelsSession> {
        const response = await this.sessionsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * create vote
     * Create a new vote
     */
    async votesPostRaw(requestParameters: VotesPostRequest): Promise<runtime.ApiResponse<ModelsVote>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling votesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/votes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsCreateVoteRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsVoteFromJSON(jsonValue));
    }

    /**
     * create vote
     * Create a new vote
     */
    async votesPost(requestParameters: VotesPostRequest): Promise<ModelsVote> {
        const response = await this.votesPostRaw(requestParameters);
        return await response.value();
    }

}
