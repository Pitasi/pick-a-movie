/* tslint:disable */
/* eslint-disable */
/**
 * PickAMovie Swagger API
 * May the force be with us
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelsSession,
    ModelsSessionFromJSON,
    ModelsSessionFromJSONTyped,
    ModelsSessionToJSON,
    ModelsVote,
    ModelsVoteFromJSON,
    ModelsVoteFromJSONTyped,
    ModelsVoteToJSON,
} from './';

/**
 * 
 * @export
 * @interface ModelsProposal
 */
export interface ModelsProposal {
    /**
     * 
     * @type {string}
     * @memberof ModelsProposal
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsProposal
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsProposal
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsProposal
     */
    movieId: number;
    /**
     * 
     * @type {ModelsSession}
     * @memberof ModelsProposal
     */
    session?: ModelsSession;
    /**
     * 
     * @type {number}
     * @memberof ModelsProposal
     */
    sessionId: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsProposal
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<ModelsVote>}
     * @memberof ModelsProposal
     */
    votes?: Array<ModelsVote>;
}

export function ModelsProposalFromJSON(json: any): ModelsProposal {
    return ModelsProposalFromJSONTyped(json, false);
}

export function ModelsProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsProposal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'id': json['id'],
        'movieId': json['movieId'],
        'session': !exists(json, 'session') ? undefined : ModelsSessionFromJSON(json['session']),
        'sessionId': json['sessionId'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'votes': !exists(json, 'votes') ? undefined : ((json['votes'] as Array<any>).map(ModelsVoteFromJSON)),
    };
}

export function ModelsProposalToJSON(value?: ModelsProposal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comment': value.comment,
        'createdAt': value.createdAt,
        'id': value.id,
        'movieId': value.movieId,
        'session': ModelsSessionToJSON(value.session),
        'sessionId': value.sessionId,
        'updatedAt': value.updatedAt,
        'votes': value.votes === undefined ? undefined : ((value.votes as Array<any>).map(ModelsVoteToJSON)),
    };
}


